#include <stdio.h>
#include <string.h>

int main() {
    char stack[20], ip[20], opt[10][10], ter[10];
    int i, j, k, n, top = 0, row = -1, col = -1;
    int len;

    
    memset(stack, '\0', sizeof(stack));
    memset(ip, '\0', sizeof(ip));
    memset(opt, '\0', sizeof(opt));
    memset(ter, '\0', sizeof(ter));

    
    printf("Enter the number of terminals: ");
    scanf("%d", &n);

    
    printf("Enter the terminals: ");
    for (i = 0; i < n; i++) {
        scanf(" %c", &ter[i]);  // Space before %c ensures correct input
    }

    
    printf("\nEnter the operator precedence table:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            printf("Enter the precedence for (%c, %c): ", ter[i], ter[j]);
            scanf(" %c", &opt[i][j]);  // Store single character
        }
    }

    
    printf("\nOPERATOR PRECEDENCE TABLE:\n");
    printf("\t");
    for (i = 0; i < n; i++) {
        printf("%c\t", ter[i]);
    }
    printf("\n");

    for (i = 0; i < n; i++) {
        printf("%c |", ter[i]);
        for (j = 0; j < n; j++) {
            printf("\t%c", opt[i][j]);
        }
        printf("\n");
    }

    
    stack[top] = '$';

    
    printf("\nEnter the input string (append $ at the end): ");
    scanf("%s", ip);

    printf("\nSTACK\t\tINPUT STRING\t\tACTION\n");
    printf("%s\t\t%s\t\t", stack, ip);

    len = strlen(ip);
    i = 0;

    while (i <= len) {
        
        row = col = -1;
        for (k = 0; k < n; k++) {
            if (stack[top] == ter[k]) {
                row = k;
            }
            if (ip[i] == ter[k]) {
                col = k;
            }
        }

        if (row == -1 || col == -1) {
            printf("\nInvalid input symbol. Parsing failed.\n");
            return 1;
        }

        if (stack[top] == '$' && ip[i] == '$') {
            printf("String is ACCEPTED\n");
            break;
        } else if (opt[row][col] == '<' || opt[row][col] == '=') {
            stack[++top] = ip[i];  // Shift
            ip[i] = ' ';
            printf("Shift\n");
            i++;
        } else if (opt[row][col] == '>') {
            while (stack[top] != '<' && top > 0) {
                top--;  // Reduce
            }
            top--;
            printf("Reduce\n");
        } else {
            printf("\nString is NOT ACCEPTED\n");
            break;
        }

        printf("\n%s\t\t%s\t\t", stack, ip);
    }

    return 0;
}
